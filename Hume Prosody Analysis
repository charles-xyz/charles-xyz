{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNHU72ghTgWWQZeWpgUSqmZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/charles-xyz/charles-xyz/blob/main/Hume%20Prosody%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install hume"
      ],
      "metadata": {
        "id": "kvL2MkhiqOaP",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "07coHcBlp5QC"
      },
      "outputs": [],
      "source": [
        "import pprint\n",
        "from hume import HumeBatchClient\n",
        "from hume.models.config import FaceConfig\n",
        "from hume.models.config import ProsodyConfig\n",
        "import json\n",
        "from google.colab import userdata\n",
        "HUME_API_KEY = userdata.get('HUME_API_KEY')\n",
        "print(HUME_API_KEY)\n",
        "def make_hume_request(cloud_input=None, local_input=None, callback_url=None, testing=False):\n",
        "  '''\n",
        "  --DESCRIPTION:\n",
        "  Function to make and recieve the result of a single Expression mesaurement API\n",
        "  request. If you are storing in the cloud set the cloud_input.\n",
        "\n",
        "  --PARAMS:\n",
        "  cloud_input -> use this if your file is stored in the cloud (production)\n",
        "  local_input -> use this if you are using local files (testing)\n",
        "  callback_url -> use to send a callback function to the specificed url\n",
        "  testing -> turn on testing with local JSON to avoid unwanted calls\n",
        "\n",
        "  --EXPLAINING RETURN:\n",
        "  i = sentence segmentation prediction number\n",
        "  i.e. input = \"I love all cats\" THEN i = \"i love\", i+1 = \"all cats\"\n",
        "  format return like this to get score:\n",
        "  [i]{\"emotions\"}{name:EMOTION_NAME, score:EMOTION_SCORE}\n",
        "  '''\n",
        "\n",
        "  if testing == False:\n",
        "    client = HumeBatchClient(HUME_API_KEY)\n",
        "\n",
        "    configs = [ProsodyConfig()]\n",
        "\n",
        "    if local_input != None:\n",
        "      job = client.submit_job(None, configs,files=[local_input])\n",
        "    else:\n",
        "      job = client.submit_job([cloud_input], configs)\n",
        "\n",
        "    print(job)\n",
        "    print(\"Running...\")\n",
        "\n",
        "    # Block until complete\n",
        "    job.await_complete()\n",
        "\n",
        "    raw_predictions = job.get_predictions()\n",
        "\n",
        "  if testing == True:\n",
        "    json_file_path = '/content/predictions.json'\n",
        "\n",
        "  # Load the JSON file\n",
        "    with open(json_file_path, \"r\") as file:\n",
        "      raw_predictions = json.load(file)\n",
        "\n",
        "  predictions = raw_predictions[0][\"results\"][\"predictions\"][0][\"models\"][\"prosody\"][\"grouped_predictions\"][0][\"predictions\"]\n",
        "# pprint.pprint(predictions)\n",
        "\n",
        "  return predictions\n",
        "  # DOWNLOAD PREDICTIONS AND ARTIFACTS-------------------------------\n",
        "\n",
        "  # job.download_predictions(\"predictions.json\")\n",
        "  # print(\"Predictions downloaded to predictions.json\")\n",
        "  # # parsed = json.loads(predictions[0])\n",
        "  # # print(json.dumps(parsed, indent=4))\n",
        "\n",
        "  # job.download_artifacts(\"artifacts.zip\")\n",
        "  # print(\"Artifacts downloaded to artifacts.zip\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "make_hume_request(local_input='/content/hume_test.m4a', testing=True)"
      ],
      "metadata": {
        "id": "mUQHWEAMrc1e",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import defaultdict\n",
        "predictions = make_hume_request(local_input='/content/hume_test.m4a', testing=True)\n",
        "\n",
        "def calculate_scores(predictions):\n",
        "  scores = defaultdict(int)\n",
        "  n = len(predictions)\n",
        "  talk_time = get_length_of_audio(predictions)\n",
        "\n",
        "  for i in range(n):\n",
        "    prediction_time = predictions[i][\"time\"]\n",
        "    # determine how much time each segment takes up of the total length of speech\n",
        "    # and use it to weight the prosidy scores\n",
        "    weight = (prediction_time[\"end\"] - prediction_time[\"begin\"]) / talk_time\n",
        "    raw_scores = sorted(predictions[i][\"emotions\"], key=lambda d: d[\"score\"], reverse=True)\n",
        "    print(raw_scores)\n",
        "    for i in range(5):\n",
        "      score = raw_scores[i][\"score\"] * weight\n",
        "      scores[raw_scores[i]['name']] += score\n",
        "  print(scores)\n",
        "\n",
        "calculate_scores(predictions)"
      ],
      "metadata": {
        "id": "L14oayOGm4ZF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_length_of_audio(predictions):\n",
        "  '''\n",
        "  -- DESC:\n",
        "  Helper function to get the length of the audio\n",
        "  --INPUT:\n",
        "  predictions -> the predictions extracted using make_hume_request\n",
        "  --OUTPUT:\n",
        "  The length of time the person was speaking - used to weight the importance of\n",
        "  each prosidy segment\n",
        "  '''\n",
        "  i = len(predictions)\n",
        "  return predictions[i-1][\"time\"][\"end\"] - predictions[0][\"time\"][\"begin\"]\n",
        "\n",
        "score = get_length_of_audio(predictions)\n",
        "print(score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1POIi1i_VN3m",
        "outputId": "8adfcf88-e4df-47ca-a51a-b2dc315f3215"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8.704014\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gRN17v_RZ3Rp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}